# -*- coding: utf-8 -*-
"""Space_Missions_Analysis_(start).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vHvaS_inU_kDiAxk2vx0xt0E6UMyJIvn

### SpaceLaunchAnalyzer: Uma Análise Abrangente dos Lançamentos Espaciais

O **SpaceLaunchAnalyzer** é uma iniciativa desenvolvida para explorar e analisar dados relevantes sobre lançamentos espaciais. Utilizando um conjunto robusto de tecnologias como **Python**, **Pandas**, **Plotly**, **Seaborn**, **Matplotlib**, e **iso3166**, este projeto visa oferecer uma compreensão detalhada das dinâmicas que governam a indústria espacial contemporânea.

Com a crescente importância das atividades espaciais, compreender os fatores que influenciam os lançamentos, desde a contagem de lançamentos por organização até o status operacional de foguetes, é crucial. O SpaceLaunchAnalyzer proporciona uma plataforma interativa para examinar:

- **Carregamento e Limpeza de Dados**: Importação e preparação de dados de lançamentos espaciais, assegurando que as análises sejam realizadas sobre um conjunto de dados limpo e relevante.
- **Análises Descritivas**: Contabilização de lançamentos por organização, avaliação do status dos foguetes, e análise de preços de lançamentos, permitindo uma visão clara do desempenho das entidades envolvidas.
- **Visualizações Intuitivas**: Gráficos e mapas que revelam padrões e tendências em lançamentos espaciais, facilitando a interpretação dos dados e a extração de insights significativos.
- **Análise de Gastos e Tendências Temporais**: Cálculo do total e gasto médio por organização, além da análise da distribuição de lançamentos ao longo do tempo, identificando períodos de maior atividade.

O objetivo deste projeto é não apenas fornecer uma análise quantitativa, mas também oferecer visualizações que tornam os dados acessíveis e compreensíveis, permitindo que interessados e profissionais do setor espacial obtenham insights valiosos sobre a evolução e os desafios da indústria espacial. O SpaceLaunchAnalyzer é, portanto, uma ferramenta essencial para quem busca entender as complexidades do espaço e os investimentos envolvidos.

<center><img src="https://i.imgur.com/9hLRsjZ.jpg" height=400></center>
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install iso3166
# %pip install plotly

import numpy as np
import pandas as pd
import plotly.express as px
import matplotlib.pyplot as plt
import seaborn as sns

from iso3166 import countries
from datetime import datetime, timedelta

"""### Load the Data"""

df_data = pd.read_csv('/content/sample_data/mission_launches.csv')
df_data.head()

"""# Preliminary Data Exploration

* What is the shape of `df_data`?
* How many rows and columns does it have?
* What are the column names?
* Are there any NaN values or duplicates?
"""

print(f"shape like: {df_data.shape}")

rows = df_data.shape[0]
columns = df_data.shape[1]
print(f"There are {rows} rows and {columns} columns.")

column_names = df_data.columns
print(f"Column names: {column_names}")

"""## Data Cleaning - Check for Missing Values and Duplicates

Consider removing columns containing junk data.
"""

nan_values = df_data.isna().sum()
print(nan_values)

duplicates = df_data.duplicated().sum()
print(f"Number of duplicate rows: {duplicates}")

df_data_cleaned = df_data.drop(columns=['Unnamed: 0', 'Unnamed: 0.1'])
df_data_cleaned.head()

"""## Descriptive Statistics

# Number of Launches per Company
"""

launches_by_org = df_data_cleaned['Organisation'].value_counts()

# Plot using Plotly
import plotly.express as px
fig = px.bar(launches_by_org, x=launches_by_org.index, y=launches_by_org.values,
             labels={'x': 'Organisation', 'y': 'Number of Launches'},
             title='Number of Launches per Organisation')
fig.show()

"""# Number of Active versus Retired Rockets


"""

rocket_status_count = df_data_cleaned['Rocket_Status'].value_counts()
fig = px.pie(rocket_status_count, values=rocket_status_count.values, names=rocket_status_count.index,
             title="Number of Active vs Retired Rockets")
fig.show()

"""# Distribution of Mission Status

"""

mission_status_count = df_data_cleaned['Mission_Status'].value_counts()
fig = px.bar(mission_status_count, x=mission_status_count.index, y=mission_status_count.values,
             labels={'x': 'Mission Status', 'y': 'Number of Missions'},
             title='Distribution of Mission Status')
fig.show()

"""# How Expensive are the Launches?

"""

df_data_cleaned['Price'] = pd.to_numeric(df_data_cleaned['Price'], errors='coerce')
fig = px.histogram(df_data_cleaned, x='Price', nbins=50, title='Distribution of Launch Prices')
fig.show()

"""# using Choropleth Map to Show the Number of Launches by Country





"""

import pandas as pd
import plotly.express as px
from iso3166 import countries
def wrangle_country(location):
    if 'Russia' in location or 'Barents Sea' in location:
        return 'Russian Federation'
    elif 'New Mexico' in location or 'Pacific Missile Range' in location or 'Gran Canaria' in location:
        return 'USA'
    elif 'Yellow Sea' in location:
        return 'China'
    elif 'Shahrud Missile Test Site' in location:
        return 'Iran'
    else:
        return location.split(',')[-1].strip()

df_data['Country'] = df_data['Location'].apply(wrangle_country)
def get_alpha3(country_name):
    try:
        return countries.get(country_name).alpha3
    except KeyError:
        return None

df_data['Country_Code'] = df_data['Country'].apply(get_alpha3)
launches_by_country = df_data.groupby('Country_Code').size().reset_index(name='Launch_Count')
fig = px.choropleth(launches_by_country, locations='Country_Code',
                    color='Launch_Count',
                    hover_name='Country_Code',
                    color_continuous_scale=px.colors.sequential.matter,
                    title="Number of Space Launches by Country")

fig.show()

"""# Using a Choropleth Map to Show the Number of Failures by Country



"""

df_data['Country'] = df_data['Location'].apply(wrangle_country)
failed_missions = df_data[df_data['Mission_Status'] == 'Failure'].copy()
failed_missions.loc[:, 'Country_Code'] = failed_missions['Country'].apply(get_alpha3)
failures_by_country = failed_missions.groupby('Country_Code').size().reset_index(name='Failure_Count')
fig = px.choropleth(failures_by_country, locations='Country_Code',
                    color='Failure_Count',
                    hover_name='Country_Code',
                    color_continuous_scale=px.colors.sequential.matter,
                    title="Number of Failed Space Launches by Country")

fig.show()

"""#Plotly Sunburst Chart of the countries, organisations, and mission status."""

import plotly.express as px

sunburst_data = df_data.groupby(['Country', 'Organisation', 'Mission_Status']).size().reset_index(name='Count')

fig = px.sunburst(sunburst_data,
                  path=['Country', 'Organisation', 'Mission_Status'],
                  values='Count',
                  title="Sunburst Chart of Countries, Organisations, and Mission Status")
fig.show()

"""# Analyse the Total Amount of Money Spent by Organisation on Space Missions"""

import pandas as pd
import plotly.express as px
df_data['Price'] = pd.to_numeric(df_data['Price'], errors='coerce')
total_spent = df_data.groupby('Organisation')['Price'].sum().reset_index()
total_spent = total_spent.sort_values(by='Price', ascending=False)
fig = px.bar(total_spent, x='Organisation', y='Price',
             title="Total Amount of Money Spent by Organisation on Space Missions",
             labels={'Price': 'Total Amount Spent', 'Organisation': 'Organization'},
             color='Price', color_continuous_scale='Viridis')

fig.show()
print(total_spent)

"""# Analyse the Amount of Money Spent by Organisation per Launch"""

import pandas as pd
import plotly.express as px
df_data['Price'] = pd.to_numeric(df_data['Price'], errors='coerce')
launches_count = df_data.groupby('Organisation')['Price'].count().reset_index(name='Launches')
total_spent = df_data.groupby('Organisation')['Price'].sum().reset_index()
merged_data = pd.merge(total_spent, launches_count, on='Organisation')
merged_data['Spent_per_Launch'] = merged_data['Price'] / merged_data['Launches']
merged_data = merged_data.sort_values(by='Spent_per_Launch', ascending=False)
fig = px.bar(merged_data, x='Organisation', y='Spent_per_Launch',
             title="Amount of Money Spent by Organisation per Launch",
             labels={'Spent_per_Launch': 'Amount Spent per Launch', 'Organisation': 'Organization'},
             color='Spent_per_Launch', color_continuous_scale='Viridis')

fig.show()
print(merged_data)

"""# Chart the Number of Launches per Year"""

import pandas as pd
import plotly.express as px
df_data['Date'] = pd.to_datetime(df_data['Date'], format='%a %b %d, %Y', errors='coerce')
missing_dates = df_data[df_data['Date'].isna()]
if not missing_dates.empty:
    print("Missing dates after conversion:")
    print(missing_dates)
df_data['Year'] = df_data['Date'].dt.year
yearly_launches = df_data.groupby('Year').size().reset_index(name='Number of Launches')
fig = px.bar(yearly_launches, x='Year', y='Number of Launches',
              title='Number of Launches per Year',
              labels={'Number of Launches': 'Total Launches', 'Year': 'Year'},
              color='Number of Launches',
              color_continuous_scale=px.colors.sequential.Plasma)
fig.show()

"""# Chart the Number of Launches

"""

import pandas as pd
import plotly.express as px
df_data['Date'] = pd.to_datetime(df_data['Date'], format='%a %b %d, %Y', errors='coerce')
df_data['Year'] = df_data['Date'].dt.year
yearly_launches = df_data.groupby('Year').size().reset_index(name='Number of Launches')
fig_yearly = px.bar(yearly_launches, x='Year', y='Number of Launches',
                    title='Number of Launches per Year',
                    labels={'Number of Launches': 'Total Launches', 'Year': 'Year'},
                    color='Number of Launches',
                    color_continuous_scale=px.colors.sequential.Plasma)

fig_yearly.show()

"""# Launches per Month: Which months are most popular and least popular for launches?

Some months have better weather than others. Which time of year seems to be best for space missions?
"""

import pandas as pd
import plotly.express as px
df_data['Date'] = pd.to_datetime(df_data['Date'], format='%a %b %d, %Y', errors='coerce')
df_data['Month'] = df_data['Date'].dt.month
df_data['Year'] = df_data['Date'].dt.year
monthly_launches = df_data.groupby('Month').size().reset_index(name='Number of Launches')
fig_monthly = px.bar(monthly_launches, x='Month', y='Number of Launches',
                      title='Number of Launches per Month',
                      labels={'Number of Launches': 'Total Launches', 'Month': 'Month'},
                      color='Number of Launches',
                      color_continuous_scale=px.colors.sequential.Viridis)
fig_monthly.update_xaxes(tickvals=monthly_launches['Month'],
                          ticktext=['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',
                                    'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'])
fig_monthly.show()

"""# How has the Launch Price varied Over Time?

"""

import pandas as pd
import plotly.express as px
df_data['Date'] = pd.to_datetime(df_data['Date'], format='%a %b %d, %Y', errors='coerce')
df_data['Price'] = pd.to_numeric(df_data['Price'], errors='coerce')
df_data['Year'] = df_data['Date'].dt.year
average_price_per_year = df_data.groupby('Year')['Price'].mean().reset_index()
fig_price = px.line(average_price_per_year, x='Year', y='Price',
                    title='Average Launch Price Over Time',
                    labels={'Price': 'Average Price ($)', 'Year': 'Year'},
                    markers=True)

fig_price.show()

"""# Chart the Number of Launches over Time by the Top 10 Organisations.

How has the dominance of launches changed over time between the different players?
"""

import pandas as pd
import plotly.express as px
df_data['Date'] = pd.to_datetime(df_data['Date'], format='%a %b %d, %Y', errors='coerce')
df_data['Year'] = df_data['Date'].dt.year
launches_per_organisation = df_data.groupby(['Year', 'Organisation']).size().reset_index(name='Launches')
top_10_organisations = launches_per_organisation.groupby('Organisation')['Launches'].sum().nlargest(10).index
top_launches_per_year = launches_per_organisation[launches_per_organisation['Organisation'].isin(top_10_organisations)]
fig_launches = px.line(top_launches_per_year, x='Year', y='Launches', color='Organisation',
                        title='Number of Launches Over Time by Top 10 Organisations',
                        labels={'Launches': 'Number of Launches', 'Year': 'Year'},
                        markers=True)
fig_launches.show()

"""# Cold War Space Race: USA vs USSR

The cold war lasted from the start of the dataset up until 1991.
"""

import pandas as pd
import plotly.express as px
df_data['Date'] = pd.to_datetime(df_data['Date'], format='%a %b %d, %Y', errors='coerce')
cold_war_data = df_data[df_data['Date'] < '1991-01-01'].copy()
cold_war_data.loc[:, 'Country'] = cold_war_data['Organisation'].replace({
    'USA': 'USA',
    'Soviet Union': 'USSR',
    'Russian Federation': 'USSR',

})
launches_by_country = cold_war_data['Country'].value_counts().reset_index()
launches_by_country.columns = ['Country', 'Launches']
fig_cold_war = px.bar(launches_by_country, x='Country', y='Launches',
                       title='Total Number of Launches During the Cold War (USA vs USSR)',
                       labels={'Launches': 'Number of Launches', 'Country': 'Country'},
                       color='Country')
fig_cold_war.show()
cold_war_data.loc[:, 'Year'] = cold_war_data['Date'].dt.year
launches_by_year_country = cold_war_data.groupby(['Year', 'Country']).size().reset_index(name='Launches')
fig_cold_war_time = px.line(launches_by_year_country, x='Year', y='Launches', color='Country',
                             title='Number of Launches Over Time During the Cold War (USA vs USSR)',
                             labels={'Launches': 'Number of Launches', 'Year': 'Year'},
                             markers=True)
fig_cold_war_time.show()

"""## Create a Plotly Pie Chart comparing the total number of launches of the USSR and the USA

Hint: Remember to include former Soviet Republics like Kazakhstan when analysing the total number of launches.
"""

import pandas as pd
import plotly.express as px

data = {
    'Date': ['Thu Aug 29, 2019', 'Fri Jul 24, 2020', 'Sat Jun 25, 2021', 'Sun May 30, 2021'],
    'Organisation': ['USA', 'Soviet Union', 'Kazakhstan', 'Russian Federation'],
    'Price': [100, 200, 300, 400]
}
df_data = pd.DataFrame(data)
df_data['Date'] = pd.to_datetime(df_data['Date'], format='%a %b %d, %Y', errors='coerce')

country_map = {
    'USA': 'USA',
    'Soviet Union': 'USSR',
    'Russian Federation': 'USSR',
    'Kazakhstan': 'USSR',
}

df_data['Country'] = df_data['Organisation'].replace(country_map)
total_launches = df_data['Country'].value_counts().reset_index()
total_launches.columns = ['Country', 'Total Launches']
print("Total Launches by Country:")
print(total_launches)
launch_comparison = total_launches[total_launches['Country'].isin(['USA', 'USSR'])]
print("\nLaunch Comparison:")
print(launch_comparison)
if launch_comparison.empty:
    print("No data available for the selected countries.")
else:
    fig_pie = px.pie(launch_comparison,
                     values='Total Launches',
                     names='Country',
                     title='Total Number of Launches: USA vs USSR (Including Kazakhstan)',
                     color='Country',
                     color_discrete_sequence=px.colors.qualitative.Set2)

    fig_pie.show()

"""
## Create a Chart that Shows the Total Number of Launches Year-On-Year by the Two Superpowers"""

import pandas as pd
import plotly.express as px
data = {
    'Date': ['Thu Aug 29, 2019', 'Fri Jul 24, 2020', 'Sat Jun 25, 2021', 'Sun May 30, 2021',
             'Mon Jan 01, 1960', 'Tue Feb 01, 1961', 'Wed Mar 01, 1962', 'Thu Apr 01, 1963'],
    'Organisation': ['USA', 'Soviet Union', 'Kazakhstan', 'Russian Federation',
                    'USA', 'Soviet Union', 'Kazakhstan', 'Russian Federation'],
    'Price': [100, 200, 300, 400, 150, 250, 350, 450]
}
df_data = pd.DataFrame(data)


df_data['Date'] = pd.to_datetime(df_data['Date'], format='%a %b %d, %Y', errors='coerce')

country_map = {
    'USA': 'USA',
    'Soviet Union': 'USSR',
    'Russian Federation': 'USSR',
    'Kazakhstan': 'USSR',
}

df_data['Country'] = df_data['Organisation'].replace(country_map)


df_data['Year'] = df_data['Date'].dt.year
launch_counts = df_data.groupby(['Year', 'Country']).size().reset_index(name='Total Launches')


launch_comparison = launch_counts[launch_counts['Country'].isin(['USA', 'USSR'])]


fig_line = px.line(launch_comparison,
                   x='Year',
                   y='Total Launches',
                   color='Country',
                   title='Total Number of Launches Year-on-Year: USA vs USSR (Including Kazakhstan)',
                   labels={'Total Launches': 'Number of Launches'},
                   markers=True)
fig_line.show()